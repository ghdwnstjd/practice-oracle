TCL(Transaction Control Language)	: 트랜잭션 제어어

트랜잭션
	하나의 작업 단위
	여러 개의 SQL문의 묶음

	1. COMMIT
		모든 작업(트랜잭션)을 확정하는 명령어

	2. ROLLBACK
		이전 커밋 시점으로 되돌아가는 명령어

** 
TRUNCATE는 테이블 내용을 전체 삭제하므로, DELETE보다 빠르게 처리할 수 있다.
대용량 데이터 처리에 유리하지만 복구가 불가능하기 때문에 복구가 가능한 DELETE를
사용하는 것이 좋다.

=========================================================================

정규화
	삽입/수정/삭제의 이상현상을 제거하기 위한 작업
	데이터의 중복을 최소화하는 데에 목적이 있다.
	6차 정규화까지 있으나 실무에서는 보통 3차 정규화까지만 진행한다.


1차 정규화
	같은 성격과 내용의 컬럼이 연속적으로 나타날 경우

	상품명
	바지1, 바지2, 바지3

	상품명1	상품명2	상품명3
	바지1	바지2	바지3

	*조회가 힘들다.
	
	- 1차 정규화 진행

	상품명
	바지1
	바지2
	바지3


2차 정규화
	조합키(복합키)로 구성되었을 경우 조합키의 일부분에만 종속되는 속성이 있을 경우
	-> 이름과 색상이 조합키인데, 이름만 있어도 과를 알 수 있으므로 과가 2차 정규화 대상이다.

	FLOWER
	이름P	색상P	꽃말	과
	해바라기	노란색	행운	국화
	장미	빨간색	사랑	장미

	* 이름으로만 가지고도 과를 알 수 있다.

	- 2차 정규화 진행

	FLOWER
	이름P	색상P	꽃말
	해바라기	노란색	행운
	장미	빨간색	사랑

	FLOWER_TYPE
	이름P	과
	해바라기	국화
	장미	장미


3차 정규화 
	PK가 아닌 컬럼이 다른 컬럼을 결정하는 경우
	이행함수 종속을 제거해야 한다.
	* 이행함수 종속 : 하나의 컬럼이 하나의 결과만 도출해야하는데, 하나의 컬럼이 두 개 이상의 결과를 도출하는 상황

	회원번호	이름	시	구	동	우편번호
	1	한동석	남양주	화도읍	구암리	12345
	2	홍길동	서울시	관악구	신림동	45454

	* 우편번호가 시, 구, 동을 결정한다.
	* 회원번호가 우편번호를 결정하고(1번), 우편번호가 시/구/동을 결정(2번)한다.

	- 3차 정규화 진행
	회원번호	이름	우편번호
	1	한동석	12345
	2	홍길동	45454

	우편번호	시	구	동
	12345	남양주	화도읍	구암리
	45454	서울시	관악구	신림동

---------------------------------------------------------------------------------------------------------------------------------------------------------

데이터베이스에서 정규화가 필요한 이유
	데이터베이스를 잘못 설계하면 불필요한 데이터 중복으로 인해 공간이 낭비된다.
	이런 현상을 이상(Anomaly)현상이라고 한다.

	회원번호와 프로젝트코드 두 컬럼의 조합키로 설정되어 있는 테이블이고
	한 사람은 하나의 부서만 가질 수 있다.

	회원번호		이름	부서	프로젝트코드	급여	부서별 명수
	22080101	한동석	개발팀	ABC0001		3000	4
	22080101	한동석	개발팀	DEF1112		2000	4
	22080101	한동석	개발팀	CBA9474		4000	4
	22080104	홍길동	기획팀	EFG0881		5000	2
	22081106	이순신	디자인팀	GHI9991		6000	3

이상현상의 종류
	- 삽입 이상
		새 데이터를 삽입하기 위해 불필요한 데이터도 삽입해야하는 문제
		
		담당 프로젝트가 정해지지 않은 사원이 있다면,
		프로젝트 코드에 NULL을 작성할 수 없으므로 이 사원은 테이블에 추가될 수 없다.
		따라서 '미정'이라는 프로젝트 코드를 따로 만들어서 삽입해야 한다.

	- 갱신 이상
		중복 행 중에서 일부만 변경하여 데이터가 불일치하게 되는 모순의 문제

		한 명의 사원은 반드시 하나의 부서에만 속할 수 있다.
		만약 "한동석"이 보안팀으로 부서를 옮길 시 3개 모두 갱신해주지 않는다면
		개발팀인지 보안팀인지 알 수 없다.

	- 삭제 이상
		행을 삭제하면 꼭 필요한 데이터까지 함께 삭제되는 문제
		
		"이순신"이 담당한 프로젝트를 박살내서 드랍된다면 "이순신"행을 모두 삭제하게 된다.
		따라서 프로젝트에서 드랍되면 정보를 모두 드랍하게 된다.

	이러한 이상 현상이 발생하는 이유는 테이블이 정규화가 되어 있지 않기 때문이다.
	정규화를 진행하기 위해서는 각 컬럼간의 관련성을 파악해야 하고, 이 관련성을
	"함수적 종속성(Functional Dependency)"이라고 한다.
	따라서 하나의 테이블에서는 반드시 하나의 함수적 종속성만 존재하도록 정규화를 진행한다.

	함수
	X -> Y
	X: 결정자
	Y: 종속자
	Y가 X에 의존한다.



	* 2차 정규화 진행

	회원번호		프로젝트코드	급여
	22080101	ABC0001		3000	
	22080101	DEF1112		2000	
	22080101	CBA9474		4000
	22080104	EFG0881		5000	
	22081106	GHI9991		6000	

	회원번호		이름	부서	부서별 명수
	22080101	한동석	개발팀	4
	22080104	홍길동	기획팀	2
	22081106	이순신	디자인팀	3


	- 3차 정규화 진행
	회원번호		이름	부서	
	22080101	한동석	개발팀	
	22080104	홍길동	기획팀	
	22081106	이순신	디자인팀	
	22080103	장보고	개발팀

	부서	부서별 명수
	개발팀	4
	기획팀	2
	디자인팀	3

---------------------------------------------------------------------------------------------------------------------------------------------------------

NULL
	정의되지 않은 값
	빈 값 대신 미정 값을 부여할 때 사용
	PK는 불가능, FK 가능, UK 가능

NOT NULL 제약 조건
	ALTER TABLE [테이블명] MODIFY NOT NULL

제약조건 삭제
	ALTER TABLE [테이블명] DROP C"oNSTRAINT [제약조건 이름]

조건식
	컬럼명 IS NULL : 컬럼 값이 NULL이면 참
	컬럼명 IS NOT NULL : 컬럼 값이 NULL이 아니면 참

NULL 값을 다른 값으로 변경
	NVL(컬럼명, '값') : NULL 값 대신 다른 값으로 변경 후 조회
	NVL2(컬럼명, 'NULL이 아닐 때 값', 'NULL일 때 값') : NULL일 때의 값, NULL이 아닐 때의 값을 각각 설정

---------------------------------------------------------------------------------------------------------------------------------------------------------

JOIN
	여러 테이블에 흩어져있는 정보 중
	사용자가 필요한 정보만 가져와서 가상의 테이블처럼 만들고
	결과를 보여주는 것
	정규화를 통해 조회 테이블이 너무 많이 쪼개져 있으면 작업이 불편하기 때문에
	입력, 수정, 삭제의 성능을 향상시키기 위해서 JOIN을 통해 합친 후 사용한다.


내부 조인(INNER JOIN)
	조건이 일치하는 값만 합쳐서 조회
	
	FROM
	[테이블명A] INNER JOIN [테이블명B]
	ON [조건식]

	1. 등가 조인
		조건식에 = 있으면 등가 조인
	2. 비등가 조인
		조건식에 = 없으면 비등가 조인


SQL 실행 순서
	FROM > ON > JOIN > WHERE > GROUP BY >HAVING > SELECT > ORDER BY
