무결성
	데이터의 정확성, 일관성, 유효성이 유지되는 것
	
	정확성 : 데이터는 애매하지 않아야 한다.
	일관성 : 각 사용자가 일관된 데이터를 볼 수 있도록 해야 한다.
	유효성 : 데이터가 실제 존재하는 데이터여야 한다.

	1. 개체 무결성
		모든 테이블이 PK로 선택된 컬럼을 가져야 한다.

	2. 참조 무결성
		두 테이블의 데이터가 항상 일관된 값을 가지도록 유지하는 것

	3. 도메인 무결성
		컬럼의 타입, NULL값의 허용 등에 대한 사항을 정의하고 올바른 데이터가 입력되었는 지를 확인하는 것

===========================================================================================

모델링(기획)
	추상적인 주제를 DB에 맞게 설계하는 것

1. 요구사항 분석
	회원, 주문, 상품 : 3가지를 관리하고자 한다.

2. 개념적 설계(개념 모델링)
	회원	주문	상품
	----------------------------
	아이디	주문번호	상품번호
	비밀번호	주문날짜	상품명
	이름	아이디	가격
	주소	상품번호	재고량
	이메일
	생일

3. 논리적 설계(논리 모델링)
	회원		주문		상품
	---------------------------------------------------------
	아이디P		주문번호P	상품번호P
	---------------------------------------------------------
	비밀번호		주문날짜		상품명
	이름		아이디F		가격
	주소		상품번호F	재고량
	이메일U
	생일

4. 물리적 설계
	TBL_USER
	---------------------------------------------------------
	USER_ID : VARCHAR2(1000) : PRIMARY KEY
	---------------------------------------------------------
	USER_PW : VARCHAR2(1000)
	USER_NAME : VARCHAR2(1000)
	USER_ADDRESS : VARCHAR2(1000)
	USER_EMAIL : VARCHAR2(1000) : UNIQUE
	USER_BIRTH : DATE

5. 구현
===========================================================================================
1. 요구사항 분석
	꽃과 화분 두 종류를 판매하고,
	꽃을 구매할 때 화분도 같이 구매합니다.
	꽃은 이름과 색상, 가격, 유통기한, 재고량이 있고,
	화분은 제품번호, 색상, 모양, 재고량, 가격이 있습니다.
	화분은 모든 꽃을 담을 수 없고 맞는 꽃들을 담아야 합니다.
	

2. 개념적 설계
	꽃		화분
	----------------------------------------
	이름		제품번호
	색상		색상
	가격		모양
	유통기한		재고량
	재고량		가격
			꽃 이름
			꽃 색상

3. 논리적 설계
	꽃		화분
	----------------------------------------
	이름P		제품번호P
	색상P		색상
	가격		모양
	유통기한		재고량
	재고량		가격
			꽃 이름F
			꽃 색상F

4. 물리적 설계
	TBL_FLOWER
	--------------------------------------------------------------------------
	FLOWER_NAME : VARCHAR2(1000) : PRIMARY KEY
	FLOWER_COLOR: VARCHAR2(1000) : PRIMARY KEY
	--------------------------------------------------------------------------
	FLOWER_PRICE : NUMBER
	FLOWER_DATE_OF_EXPIRY : DATE
	FLOWER_STOCK : NUMBER


	TBL_POT
	--------------------------------------------------------------------------
	POT_NUMBER : NUMBER : PRIMARY KEY
	--------------------------------------------------------------------------
	POT_COLOR : VARCHAR2(1000)
	POT_SHAPE : VARCHAR2(1000)
	POT_STOCK : NUMBER
	POT_PRICE : NUMBER
	FLOWER_NAME : VARCHAR2(1000) : FOREIGN KEY
	FLOWER_COLOR : VARCHAR2(1000) : FOREIGN KEY

5. 구현 (day02.sql)

===========================================================================================

[실습]

1. 요구사항 분석
	동물병원에서 반려동물 정보와 보호자의 정보가 필요하다.
	반려동물의 정보 중 핀번호, 종, 이름, 나이, 병명이 필요하고, 
	보호자의 정보 중 이름, 나이, 주소, 핸드폰 번호가 필요하다.
	한 명의 보호자는 여러 반려동물을 등록할 수 있다.


2. 개념적 설계
	보호자		반려동물
	----------------------------------------
	이름		핀번호
	나이		종
	주소		이름
	핸드폰번호	나이
			병명
			보호자 핸드폰번호

3. 논리적 설계
	보호자		반려동물
	----------------------------------------
	이름		핀번호P
	핸드폰번호P	종
	주소		이름
	나이		나이
			병명
			보호자 핸드폰번호F
			
4. 물리적 설계
	TBL_PROTECTOR
	----------------------------------------
	PROTECTOR_PHONE_NUMBER VARCHAR2(1000) PRIMARY KEY
	----------------------------------------
	PROTECTOR_NAME VARCHAR(1000)
	PROTECTOR_ADDRESS VARCHAR(1000)
	PROTECTOR_AGE NUMBER

	TBL_PET
	----------------------------------------
	PET_PIN_NUMBER NUMBER PRIMARY KEY
	----------------------------------------
	PET_SPECIES VARCHAR(1000)
	PET_NAME VARCHAR2(1000)
	PET_NUMBER NUMBER
	PET_AGE NUMBER
	PET_DISEASE VARCHAR(1000)
	PROTECTOR_PHONE_NUMBER FOREIGN KEY

5. 구현(day02.sql)

===========================================================================================

▶ DML(Data Manipulation Language) : 데이터 조작어
	1. SELECT	: 조회
		SELECT [컬럼명,...] 
		FROM [테이블명]
		WHERE [조건식];

	2. INSERT	: 추가
		1) 컬럼을 생략할 수 있다.
			INSERT INTO [테이블명] ([컬럼명,...])
			VALUES([값, ...]);

		2) 모든 값을 전부 작성해야 되면, 컬럼명은 직접 작성하지 않는다.
			INSERT INTO [테이블명]
			VALUES([값,...]);

	3. UPDATE	: 수정
		UPDATE [테이블명]
		SET [컬럼명 = 값, ...]
		WHERE [조건식];

	4. DELETE	: 삭제
		DELETE FROM [테이블명]
		WHERE [조건식];

===========================================================================================

조건식에서 사용되는 연산자(WHERE절에서만 사용 가능)
	>, <		: 초과, 미만
	>=, <=		: 이상, 이하
	=		: 같다
	<>, !=, ^=	: 같지 않다
	AND		: 둘 다 참이면 참
	OR		: 둘 중 하나라도 참이면 참
